//: `applicativeLaws` definitions; requires `fixedTypesForTests`

import XCTest
@testable import Monads
import SwiftCheck

class ApplicativeLawsTests: XCTestCase {
    {% for type in types.all|!protocol|annotated:"applicativeLaws"|annotated:"fixedTypesForTests" %}
// MARK: - {{ type.name }}
    func test{{ type.name }}() {
        property("Applicative law: identity") <- forAll { (a: {{ type.annotations.fixedTypesForTests }}{% if type.annotations.requiredContextForPropertyBasedTests %}, context: {{ type.annotations.requiredContextForPropertyBasedTests }}{% endif %}) in
            Law.Applicative.On{{ type.name }}.identity(a{% if type.annotations.requiredContextForPropertyBasedTests %}, context{% endif %})
        }

        property("Applicative law: homomorphism") <- forAll { (a: {{ type.annotations.fixedTypesForTests }}, af: ArrowOf<{{ type.annotations.fixedTypesForTests }},{{ type.annotations.fixedTypesForTests }}>{% if type.annotations.requiredContextForPropertyBasedTests %}, context: {{ type.annotations.requiredContextForPropertyBasedTests }}{% endif %}) in
            Law.Applicative.On{{ type.name }}.homomorphism(a, af.getArrow{% if type.annotations.requiredContextForPropertyBasedTests %}, context{% endif %})
        }

        property("Applicative law: interchange") <- forAll { (a: {{ type.annotations.fixedTypesForTests }}, af: ArrowOf<{{ type.annotations.fixedTypesForTests }},{{ type.annotations.fixedTypesForTests }}>{% if type.annotations.requiredContextForPropertyBasedTests %}, context: {{ type.annotations.requiredContextForPropertyBasedTests }}{% endif %}) in
            Law.Applicative.On{{ type.name }}.interchange(a, af.getArrow{% if type.annotations.requiredContextForPropertyBasedTests %}, context{% endif %})
        }

        property("Applicative law: composition") <- forAll { (a: {{ type.annotations.fixedTypesForTests }}, af: ArrowOf<{{ type.annotations.fixedTypesForTests }},{{ type.annotations.fixedTypesForTests }}>, ag: ArrowOf<{{ type.annotations.fixedTypesForTests }},{{ type.annotations.fixedTypesForTests }}>{% if type.annotations.requiredContextForPropertyBasedTests %}, context: {{ type.annotations.requiredContextForPropertyBasedTests }}{% endif %}) in
            Law.Applicative.On{{ type.name }}.composition(a, af.getArrow, ag.getArrow{% if type.annotations.requiredContextForPropertyBasedTests %}, context{% endif %})
        }
    }

	{% endfor %}
}
