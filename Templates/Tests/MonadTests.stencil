//: `monadLaws` definitions; requires `fixedTypesForPropertyBasedTests`

import XCTest
@testable import Monads
import SwiftCheck

class MonadLawsTests: XCTestCase {
    {% for type in types.all|!protocol|annotated:"monadLaws"|annotated:"fixedTypesForPropertyBasedTests" %}
// MARK: - {{ type.name }}
    func test{{ type.name }}() {
        property("Monad law: identity left") <- forAll { (a: {{ type.annotations.fixedTypesForPropertyBasedTests }}, af: ArrowOf<{{ type.annotations.fixedTypesForPropertyBasedTests }},{{ type.name }}Of<{{ type.annotations.fixedTypesForPropertyBasedTests }}>>) in
            Law.Monad.On{{ type.name }}.identityLeft(a, { af.getArrow($0).get{{ type.name }} })
        }

        property("Monad law: identity right") <- forAll { (a: {{ type.annotations.fixedTypesForPropertyBasedTests }}) in
            Law.Monad.On{{ type.name }}.identityRight(a)
        }

        property("Monad law: associativity") <- forAll { (a: {{ type.annotations.fixedTypesForPropertyBasedTests }}, af: ArrowOf<{{ type.annotations.fixedTypesForPropertyBasedTests }},{{ type.name }}Of<{{ type.annotations.fixedTypesForPropertyBasedTests }}>>, ag: ArrowOf<{{ type.annotations.fixedTypesForPropertyBasedTests }},{{ type.name }}Of<{{ type.annotations.fixedTypesForPropertyBasedTests }}>>) in
            Law.Monad.On{{ type.name }}.associativity(a, { af.getArrow($0).get{{ type.name }} }, { ag.getArrow($0).get{{ type.name }} })
        }
    }

	  {% endfor %}
}
