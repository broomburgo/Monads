//: `lift` definitions; requires `concrete`

{% macro getBilifted type operator parameter %}
public func {{ operator }} <A,B{% if type.annotations.context %},Z{% endif %}> (left: A, right: B) -> {{ type.annotations.concrete }}<{{ parameter }}{% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}, A.ElementType == {{ parameter }}, B.ElementType == {{ parameter }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return bilift({{ operator }})(left,right)
}
{% endmacro %}

{% macro getPrefixLifted type operator parameter %}
public prefix func {{ operator }} <A{% if type.annotations.context %},Z{% endif %}> (value: A) -> {{ type.annotations.concrete }}<{{ parameter }}{% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, A.ElementType == {{ parameter }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return lift { {{ operator }}$0 }(value)
}
{% endmacro %}

import Abstract

{% for type in types.protocols|annotated:"lift"|annotated:"concrete" %}
// MARK: - {{ type.name }}

public func lift<A,T{% if type.annotations.context %},Z{% endif %}>(_ function: @escaping (A.ElementType) -> T) -> (A) -> {{ type.annotations.concrete }}<T{% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return { $0.map(function) }
}

public func bilift<A,B,T{% if type.annotations.context %},Z{% endif %}>(_ function: @escaping (A.ElementType,B.ElementType) -> T) -> (A,B) -> {{ type.annotations.concrete }}<T{% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return { zip($0,$1).map(function) }
}

{% if type.annotations.lift+ %}
{% call getBilifted type "+" "Int" %}

{% call getBilifted type "+" "UInt" %}

{% call getBilifted type "+" "Float" %}

{% call getBilifted type "+" "Double" %}
{% endif %}

{% if type.annotations.lift- %}
{% call getBilifted type "-" "Int" %}

{% call getBilifted type "-" "UInt" %}

{% call getBilifted type "-" "Float" %}

{% call getBilifted type "-" "Double" %}
{% endif %}

{% if type.annotations.lift* %}
{% call getBilifted type "*" "Int" %}

{% call getBilifted type "*" "UInt" %}

{% call getBilifted type "*" "Float" %}

{% call getBilifted type "*" "Double" %}
{% endif %}

{% if type.annotations.lift/ %}
{% call getBilifted type "/" "Int" %}

{% call getBilifted type "/" "UInt" %}

{% call getBilifted type "/" "Float" %}

{% call getBilifted type "/" "Double" %}
{% endif %}

{% if type.annotations.liftPrefix- %}
{% call getPrefixLifted type "-" "Int" %}

{% call getPrefixLifted type "-" "Float" %}

{% call getPrefixLifted type "-" "Double" %}
{% endif %}

{% endfor %}
