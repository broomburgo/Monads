//: `lift` definitions; requires `concrete`

{% macro getBilifted type operator parameter %}
public func {{ operator }} <A,B{% if type.annotations.context %},Z{% endif %}> (left: A, right: B) -> {{ type.annotations.concrete }}<{{ parameter }}{% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}, A.ElementType == {{ parameter }}, B.ElementType == {{ parameter }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return {{ type.annotations.concrete }}.bilift({{ operator }})(left,right)
}
{% endmacro %}

import Abstract

{% for type in types.protocols|annotated:"lift"|annotated:"concrete" %}
// MARK: - {{ type.name }}
extension {{ type.annotations.concrete }} {
	public static func lift<A,T>(_ function: @escaping (A.ElementType) -> T) -> (A) -> {{ type.annotations.concrete }}<T{% if type.annotations.context %},{{ type.annotations.context }}{% endif %}> where A: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == {{ type.annotations.context }}{% endif %} {
		return { $0.map(function) }
	}

	public static func bilift<A,B,T>(_ function: @escaping (A.ElementType,B.ElementType) -> T) -> (A,B) -> {{ type.annotations.concrete }}<T{% if type.annotations.context %},{{ type.annotations.context }}{% endif %}> where A: {{ type.name }}, B: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == {{ type.annotations.context }}, B.{{ type.annotations.context }} == {{ type.annotations.context }}{% endif %}, ElementType == (A.ElementType,B.ElementType) {
		return { {{ type.annotations.concrete }}.zip($0,$1).map(function) }
	}
}
{% if type.annotations.lift+ %}
{% call getBilifted type "+" "Int" %}

{% call getBilifted type "+" "UInt" %}

{% call getBilifted type "+" "Float" %}

{% call getBilifted type "+" "Double" %}
{% endif %}

{% if type.annotations.lift- %}
{% call getBilifted type "-" "Int" %}

{% call getBilifted type "-" "UInt" %}

{% call getBilifted type "-" "Float" %}

{% call getBilifted type "-" "Double" %}
{% endif %}

{% if type.annotations.lift* %}
{% call getBilifted type "*" "Int" %}

{% call getBilifted type "*" "UInt" %}

{% call getBilifted type "*" "Float" %}

{% call getBilifted type "*" "Double" %}
{% endif %}

{% if type.annotations.lift/ %}
{% call getBilifted type "/" "Int" %}

{% call getBilifted type "/" "UInt" %}

{% call getBilifted type "/" "Float" %}

{% call getBilifted type "/" "Double" %}
{% endif %}

{% endfor %}
