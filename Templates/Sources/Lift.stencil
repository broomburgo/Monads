//: `lift` definitions; requires `map`, `joined`, `concrete`

{% macro getReturnType type parameter %}{{ type.annotations.concrete }}<{{ parameter }}{% if type.annotations.secondaryParameter %},{{ type.annotations.secondaryParameter }}{% endif %}>{% endmacro %}

{% macro getBilifted type operator parameter %}
public func {{ operator }}{% if type.annotations.secondaryParameter %} <{{ type.annotations.secondaryParameter }}>{% endif %} (left: {% call getReturnType type parameter %}, right: {% call getReturnType type parameter %}) -> {% call getReturnType type parameter %} {
	return {{ type.annotations.concrete }}.bilift({{ operator }})(left,right)
}
{% endmacro %}

import Abstract

{% for type in types.protocols|annotated:"map"|annotated:"joined"|annotated:"concrete" %}
// MARK: - {{ type.name }}
extension {{ type.annotations.concrete }} {
	public static func lift<A,B>(_ function: @escaping (A) -> B) -> ({% call getReturnType type "A" %}) -> {% call getReturnType type "B" %} where ElementType == (A) -> B {
		return { $0.map(function) }
	}

	public static func bilift<A1,A2,B>(_ function: @escaping (A1,A2) -> B) -> ({% call getReturnType type "A1" %},{% call getReturnType type "A2" %}) -> {% call getReturnType type "B" %} where ElementType == (A1,A2) -> B {
		return { {{ type.annotations.concrete }}<(A1,A2){% if type.annotations.secondaryParameter %},{{ type.annotations.secondaryParameter }}{% endif %}>.zip($0,$1).map(function) }
	}
}

{% if not type.name == "ArrayType" %}
{% call getBilifted type "+" "Int" %}

{% call getBilifted type "+" "UInt" %}

{% call getBilifted type "+" "Float" %}

{% call getBilifted type "+" "Double" %}
{% endif %}

{% call getBilifted type "-" "Int" %}

{% call getBilifted type "-" "UInt" %}

{% call getBilifted type "-" "Float" %}

{% call getBilifted type "-" "Double" %}

{% call getBilifted type "*" "Int" %}

{% call getBilifted type "*" "UInt" %}

{% call getBilifted type "*" "Float" %}

{% call getBilifted type "*" "Double" %}

{% call getBilifted type "/" "Int" %}

{% call getBilifted type "/" "UInt" %}

{% call getBilifted type "/" "Float" %}

{% call getBilifted type "/" "Double" %}

{% endfor %}
