//: `zip` definitions; requires `concrete`

import Abstract

{% for type in types.protocols|annotated:"zip"|annotated:"concrete" %}
// MARK: - {{ type.name }}

public func zip <A,B{% if type.annotations.context %},Z{% endif %}> (_ a: A, _ b: B) -> {{ type.annotations.concrete }}<(A.ElementType,B.ElementType){% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
    return a.flatMap { aValue in b.map { bValue in (aValue,bValue) } }
}

public func zip <A,B,C{% if type.annotations.context %},Z{% endif %}> (_ a: A, _ b: B, _ c: C) -> {{ type.annotations.concrete }}<(A.ElementType,B.ElementType,C.ElementType){% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}, C: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z, C.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return a.flatMap { aValue in b.flatMap { bValue in c.map { cValue in (aValue,bValue,cValue) } } }
}

public func zip <A,B,C,D{% if type.annotations.context %},Z{% endif %}> (_ a: A, _ b: B, _ c: C, _ d: D) -> {{ type.annotations.concrete }}<(A.ElementType,B.ElementType,C.ElementType,D.ElementType){% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}, C: {{ type.name }}, D: {{ type.name }}{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z, C.{{ type.annotations.context }} == Z, D.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
	return a.flatMap { aValue in b.flatMap { bValue in c.flatMap { cValue in d.map { dValue in (aValue,bValue,cValue,dValue) } } } }
}

{% endfor %}
