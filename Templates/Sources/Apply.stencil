//: `apply` definitions; requires `map`, `joined`, `concrete`

import Abstract

{% for type in types.protocols|annotated:"map"|annotated:"joined"|annotated:"concrete" %}
// MARK: - {{ type.name }}

extension {{ type.name }} {
	public func apply <A,T> (_ other: A) -> {{ type.annotations.concrete }}<T{% if type.annotations.secondaryParameter %}, {{ type.annotations.secondaryParameter }}{% endif %}> where A: {{ type.name }}, A.ElementType == (ElementType) -> T{% if type.annotations.secondaryParameter %}, A.{{ type.annotations.secondaryParameter }} == {{ type.annotations.secondaryParameter }}{% endif %} {
		return {{ type.annotations.concrete }}.zip(self,other).map { $1($0) }
	}
}

public func <*> <A,B,T{% if type.annotations.secondaryParameter %},Z{% endif %}> (left: A, right: B) -> {{ type.annotations.concrete }}<T{% if type.annotations.secondaryParameter %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}, A.ElementType == (B.ElementType) -> T{% if type.annotations.secondaryParameter %}, A.{{ type.annotations.secondaryParameter }} == Z, B.{{ type.annotations.secondaryParameter }} == Z{% endif %} {
	return {{ type.annotations.concrete }}.zip(right,left).map { $1($0) }
}

{% endfor %}
