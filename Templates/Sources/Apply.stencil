//: `apply` definitions; requires `map`, `joined`, `concrete`

import Abstract

{% for type in types.protocols|annotated:"map"|annotated:"joined"|annotated:"concrete" %}
// MARK: - {{ type.name }}

extension {{ type.name }} {
	public func apply <A,T> (_ other: A) -> {{ type.annotations.concrete }}<T{% if type.annotations.context %}, {{ type.annotations.context }}{% endif %}> where A: {{ type.name }}, A.ElementType == (ElementType) -> T{% if type.annotations.context %}, A.{{ type.annotations.context }} == {{ type.annotations.context }}{% endif %} {
		return {{ type.annotations.concrete }}.zip(self,other).map { $1($0) }
	}
}

public func <*> <A,B,T{% if type.annotations.context %},Z{% endif %}> (left: A, right: B) -> {{ type.annotations.concrete }}<T{% if type.annotations.context %},Z{% endif %}> where A: {{ type.name }}, B: {{ type.name }}, A.ElementType == (B.ElementType) -> T{% if type.annotations.context %}, A.{{ type.annotations.context }} == Z, B.{{ type.annotations.context }} == Z{% endif %}{% if type.annotations.contextRequiredProtocols %}, Z: {{ type.annotations.contextRequiredProtocols }}{% endif %} {
  	return right.apply(left)
}

{% endfor %}
