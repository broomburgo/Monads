//: `transformer` definitions for `ResultType`; requires `concrete`

{% macro getReturnTypeT type1 external %}{{ type1.annotations.concrete }}<Result<A,{% if external %}{{ external }}.{% endif %}ElementType.ErrorType>{% if type1.annotations.context %},{% if external %}{{ external }}.{% endif %}{{ type1.annotations.context }}{% endif %}>{% endmacro %}

{% macro getReturnTypeTT type1 type2 external %}{{ type1.annotations.concrete }}<{{ type2.annotations.concrete }}<Result<A,{% if external %}{{ external }}.{% endif %}ElementType.ElementType.ErrorType>{% if type2.annotations.context %},{% if external %}{{ external }}.{% endif %}ElementType.{{ type2.annotations.context }}{% endif %}>{% if type1.annotations.context %},{% if external %}{{ external }}.{% endif %}{{ type1.annotations.context }}{% endif %}>{% endmacro %}

{% macro getReturnTypeTTT type1 type2 type3 external %}{{ type1.annotations.concrete }}<{{ type2.annotations.concrete }}<{{ type3.annotations.concrete }}<Result<A,{% if external %}{{ external }}.{% endif %}ElementType.ElementType.ElementType.ErrorType>{% if type3.annotations.context %},{% if external %}{{ external }}.{% endif %}ElementType.ElementType.{{ type3.annotations.context }}{% endif %}>{% if type2.annotations.context %},{% if external %}{{ external }}.{% endif %}ElementType.{{ type2.annotations.context }}{% endif %}>{% if type1.annotations.context %},{% if external %}{{ external }}.{% endif %}{{ type1.annotations.context }}{% endif %}>{% endmacro %}

// MARK: - Level 1 Transformer
{% for type1 in types.protocols|annotated:"flatMap"|annotated:"concrete" %}

extension {{ type1.name }} where ElementType: ResultType {
	public func mapT <A> (_ transform: @escaping (ElementType.ElementType) -> A) -> {% call getReturnTypeT type1 "" %} {
		return map { $0.map(transform) }
	}

	public func flatMapT <A> (_ transform: @escaping (ElementType.ElementType) -> {% call getReturnTypeT type1 "" %}) -> {% call getReturnTypeT type1 "" %} {
		return flatMap { $0.run(
			ifSuccess: { transform($0) },
			ifFailure: { {{ type1.annotations.concrete }}.init(Result.failure($0)) },
			ifCancel: { {{ type1.annotations.concrete }}.init(Result.cancel) })
		}
	}
}

public func |>>- <T,A> (_ object: T, _ transform: @escaping (T.ElementType.ElementType) -> {% call getReturnTypeT type1 "T"%}) -> {% call getReturnTypeT type1 "T"%} where T: {{ type1.name }}, T.ElementType: ResultType {
	return object.flatMapT(transform)
}
{% endfor %}

// MARK: - Level 2 Transformer
{% for type1 in types.protocols|annotated:"flatMap"|annotated:"concrete" %}
{% for type2 in types.protocols|annotated:"transformer1"|annotated:"concrete" %}

extension {{ type1.name }} where ElementType: {{ type2.name }}, ElementType.ElementType: ResultType {
	public func mapTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType) -> A) -> {% call getReturnTypeTT type1 type2 "" %} {
		return mapT { $0.map(transform) }
	}

	public func flatMapTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType) -> {% call getReturnTypeTT type1 type2 "" %}) -> {% call getReturnTypeTT type1 type2 "" %} {
		return flatMapT { $0.run(
			ifSuccess: { transform($0) },
			ifFailure: { {{ type1.annotations.concrete }}.init({{ type2.annotations.concrete }}.init(Result.failure($0))) },
			ifCancel: { {{ type1.annotations.concrete }}.init({{ type2.annotations.concrete }}.init(Result.cancel)) })
		}
	}
}

public func ||>>- <T,A> (_ object: T, _ transform: @escaping (T.ElementType.ElementType.ElementType) -> {% call getReturnTypeTT type1 type2 "T"%}) -> {% call getReturnTypeTT type1 type2 "T"%} where T: {{ type1.name }}, T.ElementType: {{ type2.name }}, T.ElementType.ElementType: ResultType {
	return object.flatMapTT(transform)
}
{% endfor %}
{% endfor %}

// MARK: - Level 3 Transformer
{% for type1 in types.protocols|annotated:"flatMap"|annotated:"concrete" %}
{% for type2 in types.protocols|annotated:"transformer1"|annotated:"concrete" %}
{% for type3 in types.protocols|annotated:"transformer2"|annotated:"concrete" %}

extension {{ type1.name }} where ElementType: {{ type2.name }}, ElementType.ElementType: {{ type3.name }}, ElementType.ElementType.ElementType: ResultType {
	public func mapTTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType.ElementType) -> A) -> {% call getReturnTypeTTT type1 type2 type3 "" %} {
		return mapTT { $0.map(transform) }
	}

	public func flatMapTTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType.ElementType) -> {% call getReturnTypeTTT type1 type2 type3 "" %}) -> {% call getReturnTypeTTT type1 type2 type3 "" %} {
		return flatMapTT { $0.run(
			ifSuccess: { transform($0) },
			ifFailure: { {{ type1.annotations.concrete }}.init({{ type2.annotations.concrete }}.init({{ type3.annotations.concrete }}.init(Result.failure($0)))) },
			ifCancel: { {{ type1.annotations.concrete }}.init({{ type2.annotations.concrete }}.init({{ type3.annotations.concrete }}.init(Result.cancel))) })
		}
	}
}

public func |||>>- <T,A> (_ object: T, _ transform: @escaping (T.ElementType.ElementType.ElementType.ElementType) -> {% call getReturnTypeTTT type1 type2 type3 "T"%}) -> {% call getReturnTypeTTT type1 type2 type3 "T"%} where T: {{ type1.name }}, T.ElementType: {{ type2.name }}, T.ElementType.ElementType: {{ type3.name }}, T.ElementType.ElementType.ElementType: ResultType {
	return object.flatMapTTT(transform)
}
{% endfor %}
{% endfor %}
{% endfor %}
