//: `transformer` definitions for `OptionalType`; requires `concrete`

{% macro getReturnTypeT type1 %}{{ type1.annotations.concrete }}<Optional<A>{% if type1.annotations.context %},{{ type1.annotations.context }}{% endif %}>{% endmacro %}

{% macro getReturnTypeTT type1 type2 %}{{ type1.annotations.concrete }}<{{ type2.annotations.concrete }}<Optional<A>{% if type2.annotations.context %},ElementType.{{ type2.annotations.context }}{% endif %}>{% if type1.annotations.context %},{{ type1.annotations.context }}{% endif %}>{% endmacro %}

{% macro getReturnTypeTTT type1 type2 type3 %}{{ type1.annotations.concrete }}<{{ type2.annotations.concrete }}<{{ type3.annotations.concrete }}<Optional<A>{% if type3.annotations.context %},ElementType.ElementType.{{ type3.annotations.context }}{% endif %}>{% if type2.annotations.context %},ElementType.{{ type2.annotations.context }}{% endif %}>{% if type1.annotations.context %},{{ type1.annotations.context }}{% endif %}>{% endmacro %}

// MARK: - Level 1 Transformer
{% for type1 in types.protocols|annotated:"transformer"|annotated:"concrete" %}

extension {{ type1.name }} where ElementType: OptionalType {
	public func mapT <A> (_ transform: @escaping (ElementType.ElementType) throws -> A) rethrows -> {% call getReturnTypeT type1 %} {
		return try map { try $0.map(transform) }
	}

	public func flatMapT <A> (_ transform: @escaping (ElementType.ElementType) throws -> {% call getReturnTypeT type1 %}) rethrows -> {% call getReturnTypeT type1 %} {
		return try flatMap { try $0.run(
			ifSome: { try transform($0) },
			ifNone: { {{ type1.annotations.concrete }}.init(Optional.none) })
		}
	}
}

{% endfor %}

// MARK: - Level 2 Transformer
{% for type1 in types.protocols|annotated:"transformer"|annotated:"concrete" %}
{% for type2 in types.protocols|annotated:"transformer"|annotated:"concrete" %}

extension {{ type1.name }} where ElementType: {{ type2.name }}, ElementType.ElementType: OptionalType {
	public func mapTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType) throws -> A) rethrows -> {% call getReturnTypeTT type1 type2 %} {
		return try mapT { try $0.map(transform) }
	}

	public func flatMapTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType) throws -> {% call getReturnTypeTT type1 type2 %}) rethrows -> {% call getReturnTypeTT type1 type2 %} {
		return try flatMapT { try $0.run(
			ifSome: { try transform($0) },
			ifNone: { {{ type1.annotations.concrete }}.init({{ type2.annotations.concrete }}.init(Optional.none)) })
		}
	}
}

{% endfor %}
{% endfor %}

// MARK: - Level 3 Transformer
{% for type1 in types.protocols|annotated:"transformer"|annotated:"concrete" %}
{% for type2 in types.protocols|annotated:"transformer"|annotated:"concrete" %}
{% for type3 in types.protocols|annotated:"transformer"|annotated:"concrete" %}

extension {{ type1.name }} where ElementType: {{ type2.name }}, ElementType.ElementType: {{ type3.name }}, ElementType.ElementType.ElementType: OptionalType {
	public func mapTTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType.ElementType) throws -> A) rethrows -> {% call getReturnTypeTTT type1 type2 type3 %} {
		return try mapTT { try $0.map(transform) }
	}

	public func flatMapTTT <A> (_ transform: @escaping (ElementType.ElementType.ElementType.ElementType) throws -> {% call getReturnTypeTTT type1 type2 type3 %}) rethrows -> {% call getReturnTypeTTT type1 type2 type3 %} {
		return try flatMapTT { try $0.run(
			ifSome: { try transform($0) },
			ifNone: { {{ type1.annotations.concrete }}.init({{ type2.annotations.concrete }}.init({{ type3.annotations.concrete }}.init(Optional.none))) })
		}
	}
}

{% endfor %}
{% endfor %}
{% endfor %}
