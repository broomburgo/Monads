{% macro object type parameter %}{{ type.name }}<{{ parameter }}{% if type.annotations.fixedSecondaryParameterForTests %},{{ type.annotations.fixedSecondaryParameterForTests }}{% endif %}>{% endmacro %}

//: `functorLaws` definitions

@testable import Monads
import Abstract
import Functional

extension Law {
    enum Functor {
    {% for type in types.all|!protocol|annotated:"functorLaws" %}
// MARK: - {{ type.name }}
		{% if type.annotations.requiredContextForPropertyBasedTests %}
		enum On{{ type.name }} {
			static func identity <A> (_ value: A, _ context: {{ type.annotations.requiredContextForPropertyBasedTests }}) -> Bool where A: Equatable {
				return ({% call object type "A" %}.pure(value).map(F.identity) == F.identity({% call object type "A" %}.pure(value)))(context)
			}

			static func composition<A,B,C>(_ value: A, _ f: @escaping (A) -> B, _ g: @escaping (B) -> C, _ context: {{ type.annotations.requiredContextForPropertyBasedTests }}) -> Bool where A: Equatable, B: Equatable, C: Equatable {
				let mapF = {% if type.annotations.throwingMap %}try! {% endif %}F.flip({% call object type "A" %}.map)(f)
				let mapG = {% if type.annotations.throwingMap %}try! {% endif %}F.flip({% call object type "B" %}.map)(g)
				return ({% if type.annotations.throwingMap %}try! {% endif %}{{ type.name }}.pure(value).map(g • f) == (mapG • mapF § {{ type.name }}.pure(value)))(context)
			}
		}
		{% else %}
        enum On{{ type.name }} {
            static func identity <A> (_ value: A) -> Bool where A: Equatable {
                return {% call object type "A" %}.pure(value).map(F.identity) == F.identity({% call object type "A" %}.pure(value))
            }

            static func composition<A,B,C>(_ value: A, _ f: @escaping (A) -> B, _ g: @escaping (B) -> C) -> Bool where A: Equatable, B: Equatable, C: Equatable {
				let mapF = {% if type.annotations.throwingMap %}try! {% endif %}F.flip({% call object type "A" %}.map)(f)
                let mapG = {% if type.annotations.throwingMap %}try! {% endif %}F.flip({% call object type "B" %}.map)(g)
                return {% if type.annotations.throwingMap %}try! {% endif %}{{ type.name }}.pure(value).map(g • f) == (mapG • mapF § {{ type.name }}.pure(value))
            }
        }
		{% endif %}
    {% endfor %}
    }
}
